{"version":3,"file":"static/js/965.f7c1985f.chunk.js","mappings":"mJAEA,MAeA,EAfmD,SAAUA,GAAI,IAADC,EAC5D,MAAM,MAAEC,EAAK,WAAEC,GAAeC,KAAKC,MAC7BC,EAA2B,QAAtBL,EAAGG,KAAKG,OAAOC,eAAO,IAAAP,OAAA,EAAnBA,EAAqBQ,cAAc,kBAG7CP,IACAI,GACAN,EAAEU,SAAWJ,GACZA,EAAMK,SAASX,EAAEU,SAChBP,IAAcA,KAEhBD,GAER,E,aCPA,MAAMU,UAAcC,EAAAA,UAGhBC,WAAAA,CAAYT,GACRU,MAAMV,GAAO,KAHjBE,YAAM,OAWNS,gBAAkBA,EAPdZ,KAAKa,MAAQ,CAAC,EAEdb,KAAKY,gBAAkBZ,KAAKY,gBAAgBE,KAAKd,MAEjDA,KAAKG,OAASM,EAAAA,WAClB,CAIAM,iBAAAA,GACI,MAAM,OAAEC,GAAWhB,KAAKC,MAEpBe,GACAA,EAAOhB,KAAKG,OAAOC,SAGvBa,YAAW,KACNC,SAASC,iBAA2C,QAASnB,KAAKY,gBAAgB,GACpF,GACP,CAEAQ,oBAAAA,GACKF,SAASG,oBAA8C,QAASrB,KAAKY,gBAC1E,CAEAU,MAAAA,GACI,MAAM,SAAEC,EAAQ,UAAEC,EAAY,GAAE,KAAEC,EAAI,MAAE3B,GAAUE,KAAKC,MAEvD,OACIyB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAJ,UACIG,EAAAA,EAAAA,KAAA,OACIE,IAAK5B,KAAKG,OACVqB,UAAW,+BAA+BC,KAAQD,IAAYD,UAE9DM,EAAAA,EAAAA,MAAA,OAAKL,UAAU,eAAcD,SAAA,EACzBG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uCAAuCM,QAAShC,EAAMyB,UACjEG,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBAEhBD,QAKrB,EAGJ,S","sources":["components/popups/popup/methods/outClickHandler.ts","components/popups/popup/Popup.tsx"],"sourcesContent":["import PopupI from '../types.ts';\n\nconst outClickHandler: PopupI['outClickHandler'] = function (e) {\n    const { close, checkClose } = this.props;\n    const inner = this.parent.current?.querySelector('.popup__inner') as HTMLElement;\n\n    if (\n        close &&\n        inner &&\n        e.target !== inner &&\n        !inner.contains(e.target as HTMLElement) &&\n        (!checkClose || checkClose())\n    ) {\n        close();\n    }\n};\n\nexport default outClickHandler;\n","import React, { MouseEvent } from 'react';\n\nimport { ListenerT } from '@global/types.ts';\n\nimport outClickHandler from './methods/outClickHandler.ts';\n\nimport PopupI from './types.ts';\n\nclass Popup extends React.Component<PopupI['props']> implements PopupI {\n    parent: React.RefObject<HTMLDivElement | null>;\n\n    constructor(props: PopupI['props']) {\n        super(props);\n        this.state = {};\n\n        this.outClickHandler = this.outClickHandler.bind(this);\n\n        this.parent = React.createRef();\n    }\n\n    outClickHandler = outClickHandler;\n\n    componentDidMount(): void {\n        const { setRef } = this.props;\n\n        if (setRef) {\n            setRef(this.parent.current as HTMLElement);\n        }\n\n        setTimeout(() => {\n            (document.addEventListener as ListenerT<MouseEvent>)('click', this.outClickHandler);\n        }, 10);\n    }\n\n    componentWillUnmount(): void {\n        (document.removeEventListener as ListenerT<MouseEvent>)('click', this.outClickHandler);\n    }\n\n    render() {\n        const { children, className = '', name, close } = this.props;\n\n        return (\n            <>\n                <div\n                    ref={this.parent}\n                    className={`popup _FULL _NOSCROLL _COL _${name} ${className}`}\n                >\n                    <div className=\"popup__inner\">\n                        <div className=\"popup__close _COL _COL_CENTER _CLICK\" onClick={close}>\n                            <i className=\"popup__closeIcon\">{/* <Icon name=\"close-thin\" /> */}</i>\n                        </div>\n                        {children}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Popup;\n"],"names":["e","_this$parent$current","close","checkClose","this","props","inner","parent","current","querySelector","target","contains","Popup","React","constructor","super","outClickHandler","state","bind","componentDidMount","setRef","setTimeout","document","addEventListener","componentWillUnmount","removeEventListener","render","children","className","name","_jsx","_Fragment","ref","_jsxs","onClick"],"sourceRoot":""}